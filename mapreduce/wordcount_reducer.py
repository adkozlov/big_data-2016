#!/usr/bin/env python
# encoding: utf-8
from __future__ import print_function
import json
import sys

# Этот скрипт вызывается для каждой задачи свертки
# Ключ свертки передается в аргументах запуска
key = sys.argv[1]
reducerId = sys.argv[2]

# Список значений передаётся в виде массива JSON объектов
# в стандартном потоке входа. Каждый объект в массиве -- результат
# выхода какой-то задачи маппинга
values = json.JSONDecoder().decode(sys.stdin.read())

# В этом map-reduce маппер выплевывает для каждого ключа число,
# следовательно в качестве значения в свертку будет подан массив чисел
# Скрипт должен записать в свой стандартный выходной поток валидный JSON-объект
# являющийся результатом свертки. Число тоже является валидным объектом,
# и его тоже можно записать в результат
print(sum(values))

# Скрипт мог бы также записать результат в файл.
# Это было бы разумнее в распределённом случае, когда каждый reducer записывает
# результат в свой собственный выходной шард.
with open(reducerId, "a") as f:
    print("Key:%s Sum:%d" % (key, sum(values)), file=f)
